<!DOCTYPE web-app PUBLIC
        "-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN"
        "http://java.sun.com/dtd/web-app_2_3.dtd" >

<web-app
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xmlns="http://java.sun.com/xml/ns/javaee"
        xmlns:web="http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd"
        xsi:schemaLocation="http://java.sun.com/xml/ns/javaee
		http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd"
        id="WebApp_ID"
        version="2.5">
    <display-name>Archetype Created Web Application</display-name>


<!--    <filter>-->
<!--        <filter-name>OpenEntityManagerInViewFilter-->
<!--        </filter-name>-->
<!--        <filter-class>-->
<!--            org.springframework.orm.jpa.support.OpenEntityManagerInViewFilter-->
<!--        </filter-class>-->
<!--    </filter>-->
<!--    <filter-mapping>-->
<!--        <filter-name>OpenEntityManagerInViewFilter</filter-name>-->
<!--        <url-pattern>/*</url-pattern>-->
<!--    </filter-mapping>-->


    <!--
    begin - DispatcherServlet - Spring Framework - é um ponto de entrada para o Spring MVC application. O Objetivo é de interceptor requisições HTTP e despachar para o component certo, que sabe como vai manipular, como usar.

    Agora todas requisições feitas para context/ serão direcionadas para o Servlet do Spring
    -->
    <servlet>
        <servlet-name>dispatcher</servlet-name>
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
        <init-param>
            <param-name>contextConfigLocation</param-name>
            <param-value>
                /WEB-INF/applicationContext.xml
                /WEB-INF/applicationContext-security.xml
            </param-value>
        </init-param>
        <load-on-startup>1</load-on-startup>
    </servlet>
    <servlet-mapping>
        <servlet-name>dispatcher</servlet-name>
        <url-pattern>/</url-pattern>
    </servlet-mapping>
<!--    end - DispatcherServlet-->

<!--    begin - Spring Security Filter - O registro deste filtro é responsavel por passar todas requisições para um filtro do Spring Security, assim o spring fica por de par de tudo também, é fundamental para o Spring Security. -->
        <filter>
            <filter-name>springSecurityFilterChain</filter-name>
            <filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
        </filter>
    <filter-mapping>
        <filter-name>springSecurityFilterChain</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>
<!--    end - Spring Security-->


<!--    <listener>-->
<!--        <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>-->
<!--    </listener>-->
<!--    <listener>-->
<!--        <listener-class>org.springframework.web.context.request.RequestContextListener</listener-class>-->
<!--    </listener>-->


    <welcome-file-list>
        <welcome-file>index.zul</welcome-file>
    </welcome-file-list>
</web-app>
